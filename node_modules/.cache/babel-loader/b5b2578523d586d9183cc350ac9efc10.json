{"ast":null,"code":"var _jsxFileName = \"/Users/gopikrishnamanchukonda/weatherass/src/components/template.js\";\nimport React, { Component } from 'react'; //import 'weather-icons/css/weather-icon.css';\n\nimport Template2 from './template2';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../../node_modules/weather-icons/css/weather-icons.css';\nconst API_KEY = \"b5eaa19399377445bfddb5e2edce42e9\";\n\nclass Template extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      jsonhourcast: [],\n      show: false,\n      count: 0,\n      icon: undefined,\n      url: undefined\n    };\n\n    this.show_hide = async e => {\n      e.preventDefault();\n      const api_forecast = await fetch(\"https://api.openweathermap.org/data/2.5/forecast?q=\".concat(this.props.city, \",\").concat(this.props.country, \"&appid=\").concat(API_KEY, \"&units=metric\"));\n      var forecast_stats = await api_forecast.json(); //var sel_date=document.getElementsByName(\"date\")[0].innerHTML;\n      //console.log(document.getElementsByName(\"datetxt\")[0].innerHTML);\n      //console.log(\"inside func\");\n\n      var sel_date = this.props.forecast.date_text; //console.log(this.props.forecast.date_text);\n\n      var readings = [];\n\n      for (var i = 0; i < 40; i++) {\n        // console.log(\"inside for loop\");\n        //console.log(forecast_stats.list[i].dt_txt);\n        //console.log(sel_date);\n        if (sel_date.substring(0, 10) === forecast_stats.list[i].dt_txt.substring(0, 10)) {\n          this.setState({\n            count: this.state.count + 1\n          });\n          var reading = {\n            \"slno\": this.state.count,\n            \"date\": forecast_stats.list[i].dt_txt,\n            \"temp\": forecast_stats.list[i].main.temp,\n            \"max_temp\": forecast_stats.list[i].main.temp_max,\n            \"min_temp\": forecast_stats.list[i].main.temp_min,\n            \"description\": forecast_stats.list[i].weather[0].description,\n            \"id\": forecast_stats.list[i].weather[0].id,\n            \"icon\": forecast_stats.list[i].weather[0].icon\n          };\n          readings.push(reading);\n        }\n      } // console.log(\"this girl\");\n      //console.log(readings);\n\n\n      this.setState({\n        show: !this.state.show,\n        jsonhourcast: readings\n      });\n    };\n  }\n\n  render() {\n    //  {console.log(\"in temp component\")}\n    // { console.log(this.props.forecast)}\n    //console.log(this.props.forecast)\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      onClick: e => this.show_hide(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: this.state.icon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      className: \"image1\",\n      src: \"http://openweathermap.org/img/wn/\".concat(this.props.forecast.icon, \".png\"),\n      alt: \"weathericon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      name: \"date\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Date:\", this.props.forecast.date), this.props.time && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Time:\", this.props.time), false && React.createElement(\"p\", {\n      name: \"datetxt\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"date text:\", this.props.forecast.date_text), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Temprature:\", this.props.forecast.temp), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Max:\", this.props.forecast.max_temp), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Min:\", this.props.forecast.min_temp), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Description:\", this.props.forecast.description)), this.state.show && this.state.jsonhourcast.map(entry => React.createElement(Template2, {\n      forecast: entry,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Template;","map":{"version":3,"sources":["/Users/gopikrishnamanchukonda/weatherass/src/components/template.js"],"names":["React","Component","Template2","API_KEY","Template","state","jsonhourcast","show","count","icon","undefined","url","show_hide","e","preventDefault","api_forecast","fetch","props","city","country","forecast_stats","json","sel_date","forecast","date_text","readings","i","substring","list","dt_txt","setState","reading","main","temp","temp_max","temp_min","weather","description","id","push","render","date","time","max_temp","min_temp","map","entry"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\n//import 'weather-icons/css/weather-icon.css';\nimport Template2 from './template2';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../../node_modules/weather-icons/css/weather-icons.css'\n\nconst API_KEY = \"b5eaa19399377445bfddb5e2edce42e9\";\nclass Template extends Component {\n    state = {\n        jsonhourcast:[],\n        show:false,\n        count:0,\n        icon:undefined,\n        url:undefined\n      }\n      \n   \n      show_hide = async(e) =>{\n        e.preventDefault();\n        const api_forecast = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${this.props.city},${this.props.country}&appid=${API_KEY}&units=metric`);\n        var forecast_stats=await api_forecast.json();\n        //var sel_date=document.getElementsByName(\"date\")[0].innerHTML;\n        //console.log(document.getElementsByName(\"datetxt\")[0].innerHTML);\n        //console.log(\"inside func\");\n        var sel_date = this.props.forecast.date_text;\n        //console.log(this.props.forecast.date_text);\n        var readings = [];\n        for (var i =0;i<40;i++){\n         // console.log(\"inside for loop\");\n          //console.log(forecast_stats.list[i].dt_txt);\n          //console.log(sel_date);\n          \n          if(sel_date.substring(0,10)===forecast_stats.list[i].dt_txt.substring(0,10)){\n          this.setState({\n              count:this.state.count+1\n          })\n       var reading ={\n           \"slno\":this.state.count,\n           \"date\":forecast_stats.list[i].dt_txt,\n           \"temp\":forecast_stats.list[i].main.temp,\n           \"max_temp\":forecast_stats.list[i].main.temp_max,\n           \"min_temp\":forecast_stats.list[i].main.temp_min,\n           \"description\":forecast_stats.list[i].weather[0].description,\n           \"id\":forecast_stats.list[i].weather[0].id,\n           \"icon\":forecast_stats.list[i].weather[0].icon\n          }\n          readings.push(reading);\n        \n        }\n      }\n\n     // console.log(\"this girl\");\n      //console.log(readings);\n \n      this.setState({\n        show:!this.state.show,\n        jsonhourcast:readings,\n    })\n      }\n\n    render() { \n        //  {console.log(\"in temp component\")}\n        // { console.log(this.props.forecast)}\n     \n      //console.log(this.props.forecast)\n        return ( <div>\n      \n             \n               <div onClick = {(e)=>this.show_hide(e)}>       \n               <i  className={this.state.icon} ></i>\n               <img className=\"image1\"src={`http://openweathermap.org/img/wn/${this.props.forecast.icon}.png`} alt ='weathericon'/>\n               <p name =\"date\">Date:{this.props.forecast.date}</p>\n\n               {this.props.time && <p>Time:{this.props.time}</p>}\n               {false && <p name =\"datetxt\">date text:{this.props.forecast.date_text}</p>}\n               <p>Temprature:{this.props.forecast.temp}</p>\n               <p>Max:{this.props.forecast.max_temp}</p>\n               <p>Min:{this.props.forecast.min_temp}</p>\n               <p>Description:{this.props.forecast.description}</p>\n               \n               </div>\n      \n               {this.state.show &&  this.state.jsonhourcast.map(entry=>(\n                    <Template2 forecast={entry}/>\n                ))\n            }\n            \n                \n                \n              \n\n\n           \n       \n    \n\n           \n            </div> );\n    }\n}\n \nexport default Template;"]},"metadata":{},"sourceType":"module"}