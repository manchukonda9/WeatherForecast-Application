{"ast":null,"code":"var _jsxFileName = \"/Users/gopikrishnamanchukonda/weatherass/src/components/template.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Template2 from './template2';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../../node_modules/weather-icons/css/weather-icons.css';\nimport Form from 'react-bootstrap/Form';\nconst API_KEY = \"b5eaa19399377445bfddb5e2edce42e9\";\n\nclass Template extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      jsonhourcast: [],\n      show: false,\n      count: 0,\n      icon: undefined,\n      url: undefined\n    };\n\n    this.show_hide = async e => {\n      e.preventDefault();\n      const api_forecast = await fetch(\"https://api.openweathermap.org/data/2.5/forecast?q=\".concat(this.props.city, \",\").concat(this.props.country, \"&appid=\").concat(API_KEY, \"&units=metric\"));\n      var forecast_stats = await api_forecast.json(); //var sel_date=document.getElementsByName(\"date\")[0].innerHTML;\n      //console.log(document.getElementsByName(\"datetxt\")[0].innerHTML);\n      //console.log(\"inside func\");\n\n      var sel_date = this.props.forecast.date_text; //console.log(this.props.forecast.date_text);\n\n      var readings = [];\n\n      for (var i = 0; i < 40; i++) {\n        // console.log(\"inside for loop\");\n        //console.log(forecast_stats.list[i].dt_txt);\n        //console.log(sel_date);\n        if (sel_date.substring(0, 10) === forecast_stats.list[i].dt_txt.substring(0, 10)) {\n          this.setState({\n            count: this.state.count + 1\n          });\n          var reading = {\n            \"slno\": this.state.count,\n            \"date\": forecast_stats.list[i].dt_txt,\n            \"temp\": forecast_stats.list[i].main.temp,\n            \"max_temp\": forecast_stats.list[i].main.temp_max,\n            \"min_temp\": forecast_stats.list[i].main.temp_min,\n            \"description\": forecast_stats.list[i].weather[0].description,\n            \"id\": forecast_stats.list[i].weather[0].id,\n            \"icon\": forecast_stats.list[i].weather[0].icon\n          };\n          readings.push(reading);\n        }\n      } // console.log(\"this girl\");\n      //console.log(readings);\n\n\n      this.setState({\n        show: !this.state.show,\n        jsonhourcast: readings\n      });\n    };\n  }\n\n  render() {\n    //  {console.log(\"in temp component\")}\n    // { console.log(this.props.forecast)}\n    //console.log(this.props.forecast)\n    return React.createElement(\"div\", {\n      className: \"divtemp\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      onClick: e => this.show_hide(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      name: \"date\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Date:\", this.props.forecast.date), React.createElement(\"img\", {\n      className: \"image1\",\n      src: \"http://openweathermap.org/img/wn/\".concat(this.props.forecast.icon, \".png\"),\n      alt: \"weathericon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), this.props.time && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Time:\", this.props.time), false && React.createElement(\"p\", {\n      name: \"datetxt\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"date text:\", this.props.forecast.date_text), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Temprature:\", this.props.forecast.temp, \"\\xB0\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Max:\", this.props.forecast.max_temp, \"\\xB0\\xA0\\xA0Min:\", this.props.forecast.min_temp, \"\\xB0\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Description:\", this.props.forecast.description)), this.state.show && this.state.jsonhourcast.map(entry => React.createElement(Link, {\n      to: \"/forecast/\".concat(this.props.city, \"&\").concat(this.props.country, \"/\").concat(entry.date, \"/random\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(Template2, {\n      forecast: entry,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default Template;","map":{"version":3,"sources":["/Users/gopikrishnamanchukonda/weatherass/src/components/template.js"],"names":["React","Component","Link","Template2","Form","API_KEY","Template","state","jsonhourcast","show","count","icon","undefined","url","show_hide","e","preventDefault","api_forecast","fetch","props","city","country","forecast_stats","json","sel_date","forecast","date_text","readings","i","substring","list","dt_txt","setState","reading","main","temp","temp_max","temp_min","weather","description","id","push","render","date","time","max_temp","min_temp","map","entry"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Template2 from './template2';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../../node_modules/weather-icons/css/weather-icons.css'\nimport Form from 'react-bootstrap/Form'\n\n\nconst API_KEY = \"b5eaa19399377445bfddb5e2edce42e9\";\nclass Template extends Component {\n  state = {\n    jsonhourcast: [],\n    show: false,\n    count: 0,\n    icon: undefined,\n    url: undefined\n  }\n\n\n  show_hide = async (e) => {\n    e.preventDefault();\n    const api_forecast = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${this.props.city},${this.props.country}&appid=${API_KEY}&units=metric`);\n    var forecast_stats = await api_forecast.json();\n    //var sel_date=document.getElementsByName(\"date\")[0].innerHTML;\n    //console.log(document.getElementsByName(\"datetxt\")[0].innerHTML);\n    //console.log(\"inside func\");\n    var sel_date = this.props.forecast.date_text;\n    //console.log(this.props.forecast.date_text);\n    var readings = [];\n    for (var i = 0; i < 40; i++) {\n      // console.log(\"inside for loop\");\n      //console.log(forecast_stats.list[i].dt_txt);\n      //console.log(sel_date);\n\n      if (sel_date.substring(0, 10) === forecast_stats.list[i].dt_txt.substring(0, 10)) {\n        this.setState({\n          count: this.state.count + 1\n        })\n        var reading = {\n          \"slno\": this.state.count,\n          \"date\": forecast_stats.list[i].dt_txt,\n          \"temp\": forecast_stats.list[i].main.temp,\n          \"max_temp\": forecast_stats.list[i].main.temp_max,\n          \"min_temp\": forecast_stats.list[i].main.temp_min,\n          \"description\": forecast_stats.list[i].weather[0].description,\n          \"id\": forecast_stats.list[i].weather[0].id,\n          \"icon\": forecast_stats.list[i].weather[0].icon\n        }\n        readings.push(reading);\n\n      }\n    }\n\n    // console.log(\"this girl\");\n    //console.log(readings);\n\n    this.setState({\n      show: !this.state.show,\n      jsonhourcast: readings,\n    })\n  }\n\n  render() {\n    //  {console.log(\"in temp component\")}\n    // { console.log(this.props.forecast)}\n\n    //console.log(this.props.forecast)\n    return (<div className=\"divtemp\">\n\n  \n      <div onClick={(e) => this.show_hide(e)}>\n\n        <p name=\"date\">Date:{this.props.forecast.date}</p>\n        <img className=\"image1\" src={`http://openweathermap.org/img/wn/${this.props.forecast.icon}.png`} alt='weathericon' />\n\n\n        {this.props.time && <p>Time:{this.props.time}</p>}\n        {false && <p name=\"datetxt\">date text:{this.props.forecast.date_text}</p>}\n        <p>Temprature:{this.props.forecast.temp}&deg;</p>\n        <p>Max:{this.props.forecast.max_temp}&deg;&nbsp;&nbsp;Min:{this.props.forecast.min_temp}&deg;</p>\n        <p>Description:{this.props.forecast.description}</p>\n\n      </div>\n\n      {this.state.show && this.state.jsonhourcast.map(entry => (\n\n        <Link to={`/forecast/${this.props.city}&${this.props.country}/${entry.date}/random`}><Template2 forecast={entry} /></Link>\n      ))\n      }\n    </div>);\n  }\n}\n\nexport default Template;"]},"metadata":{},"sourceType":"module"}