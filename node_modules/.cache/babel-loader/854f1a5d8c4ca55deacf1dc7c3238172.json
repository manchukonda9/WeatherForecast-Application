{"ast":null,"code":"var _jsxFileName = \"/Users/gopikrishnamanchukonda/weatherass/src/components/weathertry.js\";\nimport React, { Component } from 'react';\nimport Form from './Form';\nimport Template from './template'; //import 'weather-icons/css/weather-icon.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../../node_modules/weather-icons/css/weather-icons.css';\nconst API_KEY = \"b5eaa19399377445bfddb5e2edce42e9\";\n\nclass Weathertry extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      jsond: undefined,\n      date: undefined,\n      time: undefined,\n      temp: undefined,\n      max_temp: undefined,\n      min_temp: undefined,\n      description: undefined\n    };\n\n    this.getWeather1 = async e => {\n      e.preventDefault();\n      const city = e.target.elements.city.value;\n      const country = e.target.elements.country.value;\n      const api_current = await fetch(\"http://api.openweathermap.org/data/2.5/weather?q=\".concat(city, \",\").concat(country, \"&appid=\").concat(API_KEY, \"&units=metric\"));\n      const api_forecast = await fetch(\"https://api.openweathermap.org/data/2.5/forecast?q=\".concat(city, \",\").concat(country, \"&appid=\").concat(API_KEY, \"&units=metric\"));\n      const current_stats = await api_current.json();\n      const forecast_stats = await api_forecast.json();\n      console.log(current_stats);\n      console.log(forecast_stats);\n\n      if (country && city) {\n        //var jsondata ={};\n        var readings = [];\n        jsondata.readings = readings;\n        console.log(jsondata);\n        var jsondate = new Date(current_stats.dt * 1000).toLocaleDateString();\n        var jsontime = undefined;\n        var jsontemp = current_stats.main.temp;\n        var jsonmax = current_stats.main.temp_max;\n        var jsonmin = current_stats.main.temp_min;\n        var jsondesc = current_stats.weather[0].description;\n        var reading = {\n          \"date\": jsondate,\n          \"temp\": jsontemp,\n          \"max_temp\": jsonmax,\n          \"min_temp\": jsonmin,\n          \"description\": jsondesc\n        }; //jsondata.readings.push(reading);\n\n        console.log(jsondata);\n        this.setState({\n          jsond: reading,\n          date: [new Date(current_stats.dt * 1000).toLocaleDateString()],\n          temp: current_stats.main.temp,\n          max_temp: current_stats.main.temp_max,\n          min_temp: current_stats.main.temp_min,\n          description: current_stats.weather[0].description\n        }); // var current_date = new Date(current_stats.dt*1000).toLocaleDateString() ;\n        // var current_temp = current_stats.main.temp;\n        // var min_temp = current_stats.main.temp_min;\n        // var max_temp =current_stats.main.temp_max;\n        // var desc = current_stats.weather[0].description;\n        //console.log(current_date);\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(Form, {\n      getWeather1: this.getWeather1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), console.log(this.state.jsond), React.createElement(Template, {\n      forecast: this.state.jsond,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }));\n  }\n\n} // <Template date={this.state.date}\n// temp = {this.state.temp}\n// time={this.state.time}\n// min_temp={this.state.min_temp}\n// max_temp={this.state.max_temp}\n// description={this.state.description}/>\n\n\nexport default Weathertry;","map":{"version":3,"sources":["/Users/gopikrishnamanchukonda/weatherass/src/components/weathertry.js"],"names":["React","Component","Form","Template","API_KEY","Weathertry","state","jsond","undefined","date","time","temp","max_temp","min_temp","description","getWeather1","e","preventDefault","city","target","elements","value","country","api_current","fetch","api_forecast","current_stats","json","forecast_stats","console","log","readings","jsondata","jsondate","Date","dt","toLocaleDateString","jsontime","jsontemp","main","jsonmax","temp_max","jsonmin","temp_min","jsondesc","weather","reading","setState","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Form from './Form';\nimport Template from './template';\n//import 'weather-icons/css/weather-icon.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../../node_modules/weather-icons/css/weather-icons.css'\n\nconst API_KEY = \"b5eaa19399377445bfddb5e2edce42e9\";\nclass Weathertry extends Component {\n    state = {  \n        jsond :undefined,\n        date:undefined,\n        time:undefined,\n        temp:undefined,\n        max_temp:undefined,\n        min_temp:undefined,\n        description:undefined\n    }\n    getWeather1 = async (e) => {\n        e.preventDefault();\n        const city = e.target.elements.city.value;\n        const country = e.target.elements.country.value;\n       const api_current = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n       const api_forecast = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${city},${country}&appid=${API_KEY}&units=metric`);\n\n       const current_stats = await api_current.json();\n       const forecast_stats =await api_forecast.json();\n       console.log(current_stats);\n       console.log(forecast_stats);\n\n   \n       if(country && city){\n           //var jsondata ={};\n           var readings = [];\n           jsondata.readings = readings;\n        \n           console.log(jsondata);\n           var jsondate = new Date(current_stats.dt*1000).toLocaleDateString();\n           var jsontime = undefined;\n           var jsontemp= current_stats.main.temp;\n           var jsonmax = current_stats.main.temp_max;\n           var jsonmin =current_stats.main.temp_min;\n           var jsondesc = current_stats.weather[0].description;\n           var reading ={\n            \"date\":jsondate,\n            \"temp\":jsontemp,\n            \"max_temp\":jsonmax,\n            \"min_temp\":jsonmin,\n            \"description\":jsondesc\n           }\n           //jsondata.readings.push(reading);\n           console.log(jsondata);\n           this.setState({\n               jsond:reading,\n               date:[new Date(current_stats.dt*1000).toLocaleDateString()],\n               temp:current_stats.main.temp,\n               max_temp:current_stats.main.temp_max,\n               min_temp:current_stats.main.temp_min,\n               description:current_stats.weather[0].description\n\n           });\n        // var current_date = new Date(current_stats.dt*1000).toLocaleDateString() ;\n        // var current_temp = current_stats.main.temp;\n        // var min_temp = current_stats.main.temp_min;\n        // var max_temp =current_stats.main.temp_max;\n        // var desc = current_stats.weather[0].description;\n\n        \n        //console.log(current_date);\n\n       }\n\n    }\n\n\n\n    render() { \n        return (  <div>\n            <Form getWeather1={this.getWeather1}/> \n            {console.log(this.state.jsond)}\n            <Template forecast={this.state.jsond}/>\n        \n            </div>);\n    }\n}\n\n// <Template date={this.state.date}\n// temp = {this.state.temp}\n// time={this.state.time}\n// min_temp={this.state.min_temp}\n// max_temp={this.state.max_temp}\n// description={this.state.description}/>\n \nexport default Weathertry;"]},"metadata":{},"sourceType":"module"}