{"ast":null,"code":"var _jsxFileName = \"/Users/gopikrishnamanchukonda/weatherass/src/components/weathertry.js\";\nimport React, { Component } from 'react';\nimport Form from './Form';\nimport Template from './template'; //import 'weather-icons/css/weather-icon.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../../node_modules/weather-icons/css/weather-icons.css';\nconst API_KEY = \"b5eaa19399377445bfddb5e2edce42e9\";\n\nclass Weathertry extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      jsonforecast: [],\n      jsontoday: [],\n      slno: 0,\n      city: undefined,\n      country: undefined,\n      date: undefined,\n      time: undefined,\n      temp: undefined,\n      max_temp: undefined,\n      min_temp: undefined,\n      description: undefined\n    };\n\n    this.getWeather1 = async e => {\n      e.preventDefault();\n      const city = e.target.elements.city.value;\n      const country = e.target.elements.country.value;\n      const api_current = await fetch(\"http://api.openweathermap.org/data/2.5/weather?q=\".concat(city, \",\").concat(country, \"&appid=\").concat(API_KEY, \"&units=metric\"));\n      const api_forecast = await fetch(\"https://api.openweathermap.org/data/2.5/forecast?q=\".concat(city, \",\").concat(country, \"&appid=\").concat(API_KEY, \"&units=metric\"));\n      const current_stats = await api_current.json();\n      const forecast_stats = await api_forecast.json();\n      console.log(current_stats);\n      console.log(forecast_stats);\n\n      if (country && city) {\n        var readings = [];\n        var first_reading = {\n          \"slno\": this.state.slno,\n          \"date\": new Date(current_stats.dt * 1000).toLocaleDateString(),\n          \"temp\": current_stats.main.temp,\n          \"max_temp\": current_stats.main.temp_max,\n          \"min_temp\": current_stats.main.temp_min,\n          \"description\": current_stats.weather[0].description,\n          \"id\": current_stats.weather[0].id\n        };\n        readings.push(first_reading);\n        var ct = new Date(forecast_stats.list[0].dt * 1000).toLocaleDateString();\n        console.log(ct);\n\n        for (var i = 0; i < 40; i++) {\n          if (new Date(forecast_stats.list[i].dt * 1000).toLocaleDateString() !== ct) {\n            ct = new Date(forecast_stats.list[i].dt * 1000).toLocaleDateString();\n            this.setState({\n              slno: this.state.slno + 1\n            });\n            var fivereading = {\n              \"slno\": this.state.slno,\n              \"date\": new Date(forecast_stats.list[i].dt * 1000).toLocaleDateString(),\n              \"date_text\": forecast_stats.list[i].dt_txt,\n              \"temp\": forecast_stats.list[i].main.temp,\n              \"max_temp\": forecast_stats.list[i].main.temp_max,\n              \"min_temp\": forecast_stats.list[i].main.temp_min,\n              \"description\": forecast_stats.list[i].weather[0].description,\n              \"id\": forecast_stats.list[i].weather[0].id,\n              \"show\": false\n            };\n            readings.push(fivereading);\n          }\n        } //    var jsondate = new Date(current_stats.dt*1000).toLocaleDateString();\n        //    var jsontime = undefined;\n        //    var jsontemp= current_stats.main.temp;\n        //    var jsonmax = current_stats.main.temp_max;\n        //    var jsonmin =current_stats.main.temp_min;\n        //    var jsondesc = current_stats.weather[0].description;\n        //    for (var i =0;i<40;i++){\n        //        this.setState({\n        //            slno:this.state.slno+1\n        //        })\n        //     var reading ={\n        //         \"slno\":this.state.slno,\n        //         \"date\":forecast_stats.list[i].dt_txt,\n        //         \"temp\":forecast_stats.list[i].main.temp,\n        //         \"max_temp\":forecast_stats.list[i].main.temp_max,\n        //         \"min_temp\":forecast_stats.list[i].main.temp_min,\n        //         \"description\":forecast_stats.list[i].weather[0].description,\n        //         \"id\":forecast_stats.list[i].weather[0].id,\n        //         \"show\":false\n        //        }\n        //        readings.push(reading);\n        //    }\n        //    var reading ={\n        //     \"date\":jsondate,\n        //     \"temp\":jsontemp,\n        //     \"max_temp\":jsonmax,\n        //     \"min_temp\":jsonmin,\n        //     \"description\":jsondesc\n        //    }\n        //    readings.push(reading);\n        // console.log(jsondata);\n\n\n        this.setState({\n          jsonforecast: readings,\n          date: [new Date(current_stats.dt * 1000).toLocaleDateString()],\n          temp: current_stats.main.temp,\n          max_temp: current_stats.main.temp_max,\n          min_temp: current_stats.main.temp_min,\n          description: current_stats.weather[0].description\n        }); // var current_date = new Date(current_stats.dt*1000).toLocaleDateString() ;\n        // var current_temp = current_stats.main.temp;\n        // var min_temp = current_stats.main.temp_min;\n        // var max_temp =current_stats.main.temp_max;\n        // var desc = current_stats.weather[0].description;\n        //console.log(current_date);\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(Form, {\n      getWeather1: this.getWeather1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), this.state.jsonforecast.map(entry => React.createElement(Template, {\n      forecast: entry,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    })));\n  }\n\n} // <Template date={this.state.date}\n// temp = {this.state.temp}\n// time={this.state.time}\n// min_temp={this.state.min_temp}\n// max_temp={this.state.max_temp}\n// description={this.state.description}/>\n\n\nexport default Weathertry;","map":{"version":3,"sources":["/Users/gopikrishnamanchukonda/weatherass/src/components/weathertry.js"],"names":["React","Component","Form","Template","API_KEY","Weathertry","state","jsonforecast","jsontoday","slno","city","undefined","country","date","time","temp","max_temp","min_temp","description","getWeather1","e","preventDefault","target","elements","value","api_current","fetch","api_forecast","current_stats","json","forecast_stats","console","log","readings","first_reading","Date","dt","toLocaleDateString","main","temp_max","temp_min","weather","id","push","ct","list","i","setState","fivereading","dt_txt","render","map","entry"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Form from './Form';\nimport Template from './template';\n//import 'weather-icons/css/weather-icon.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../../node_modules/weather-icons/css/weather-icons.css'\n\nconst API_KEY = \"b5eaa19399377445bfddb5e2edce42e9\";\nclass Weathertry extends Component {\n    state = {  \n        jsonforecast :[],\n        jsontoday:[],\n        slno:0,\n        city:undefined,\n        country:undefined,\n        date:undefined,\n        time:undefined,\n        temp:undefined,\n        max_temp:undefined,\n        min_temp:undefined,\n        description:undefined\n    }\n    getWeather1 = async (e) => {\n        e.preventDefault();\n        const city = e.target.elements.city.value;\n        const country = e.target.elements.country.value;\n       const api_current = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n       const api_forecast = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${city},${country}&appid=${API_KEY}&units=metric`);\n       \n       \n       const current_stats = await api_current.json();\n       const forecast_stats =await api_forecast.json();\n  \n       console.log(current_stats);\n       console.log(forecast_stats);\n       \n\n   \n       if(country && city){\n           var readings = [];\n           var first_reading={\n            \"slno\":this.state.slno,\n            \"date\":new Date(current_stats.dt*1000).toLocaleDateString(),\n            \"temp\":current_stats.main.temp,\n            \"max_temp\":current_stats.main.temp_max,\n            \"min_temp\":current_stats.main.temp_min,\n            \"description\":current_stats.weather[0].description,\n           \"id\":current_stats.weather[0].id,\n         \n           }\n           readings.push(first_reading);\n           var ct = new Date(forecast_stats.list[0].dt*1000).toLocaleDateString();\n           console.log(ct);\n           for(var i=0;i<40;i++){\n            if(new Date(forecast_stats.list[i].dt*1000).toLocaleDateString()!== ct){\n                ct=new Date(forecast_stats.list[i].dt*1000).toLocaleDateString();\n               this.setState({\n                   slno:this.state.slno+1\n               })\n               var fivereading={\n                \"slno\":this.state.slno,\n                \"date\":new Date(forecast_stats.list[i].dt*1000).toLocaleDateString(),\n                \"date_text\":forecast_stats.list[i].dt_txt,\n                \"temp\":forecast_stats.list[i].main.temp,\n                \"max_temp\":forecast_stats.list[i].main.temp_max,\n                \"min_temp\":forecast_stats.list[i].main.temp_min,\n                \"description\":forecast_stats.list[i].weather[0].description,\n               \"id\":forecast_stats.list[i].weather[0].id,\n               \"show\":false\n               }\n               readings.push(fivereading);\n            }\n\n           }\n        //    var jsondate = new Date(current_stats.dt*1000).toLocaleDateString();\n        //    var jsontime = undefined;\n        //    var jsontemp= current_stats.main.temp;\n        //    var jsonmax = current_stats.main.temp_max;\n        //    var jsonmin =current_stats.main.temp_min;\n        //    var jsondesc = current_stats.weather[0].description;\n\n\n        //    for (var i =0;i<40;i++){\n        //        this.setState({\n        //            slno:this.state.slno+1\n        //        })\n        //     var reading ={\n        //         \"slno\":this.state.slno,\n        //         \"date\":forecast_stats.list[i].dt_txt,\n        //         \"temp\":forecast_stats.list[i].main.temp,\n        //         \"max_temp\":forecast_stats.list[i].main.temp_max,\n        //         \"min_temp\":forecast_stats.list[i].main.temp_min,\n        //         \"description\":forecast_stats.list[i].weather[0].description,\n        //         \"id\":forecast_stats.list[i].weather[0].id,\n        //         \"show\":false\n        //        }\n        //        readings.push(reading);\n\n        //    }\n        //    var reading ={\n        //     \"date\":jsondate,\n        //     \"temp\":jsontemp,\n        //     \"max_temp\":jsonmax,\n        //     \"min_temp\":jsonmin,\n        //     \"description\":jsondesc\n        //    }\n        //    readings.push(reading);\n          // console.log(jsondata);\n           this.setState({\n               jsonforecast\n               \n               :readings,\n\n               date:[new Date(current_stats.dt*1000).toLocaleDateString()],\n               temp:current_stats.main.temp,\n               max_temp:current_stats.main.temp_max,\n               min_temp:current_stats.main.temp_min,\n               description:current_stats.weather[0].description\n\n           });\n\n        // var current_date = new Date(current_stats.dt*1000).toLocaleDateString() ;\n        // var current_temp = current_stats.main.temp;\n        // var min_temp = current_stats.main.temp_min;\n        // var max_temp =current_stats.main.temp_max;\n        // var desc = current_stats.weather[0].description;\n\n        \n        //console.log(current_date);\n\n       }\n\n    }\n\n\n\n    render() { \n        return (  <div>\n            <Form getWeather1={this.getWeather1}/> \n           \n            \n            {\n                this.state.jsonforecast.map(entry=>(\n                    <Template forecast={entry}/>\n                ))\n            }\n            \n        \n            </div>);\n    }\n}\n\n// <Template date={this.state.date}\n// temp = {this.state.temp}\n// time={this.state.time}\n// min_temp={this.state.min_temp}\n// max_temp={this.state.max_temp}\n// description={this.state.description}/>\n \nexport default Weathertry;"]},"metadata":{},"sourceType":"module"}